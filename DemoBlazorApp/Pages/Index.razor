@page "/"
@using Newtonsoft.Json
@implements IDisposable
@inject FtpConversions FtpConversion
@inject KellerAg.Shared.IoT.Converters.IConvert Converter

<h1>Live Converter examples</h1>

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="From FTP">
            <div class="form-group">
                <RadzenCard>
                    <label for="LABEL 1">Add KELLER GSM-Text to convert to Json</label>
                    <pre><code>    string gsmCommunicationText = await File.ReadAllTextAsync(pathToFile);</code></pre>
                    <div class="btn-group" style="margin: 10px">
                        <RadzenButton Click="@(args => ChooseTextFileContentButtonClick(null, false ))" Text="Load Example Measurements File " Style="margin-left: 10px;" />
                        <RadzenButton Click="@(args => ChooseTextFileContentButtonClick(null, true))" Text="Load Example Configuration File" Style="margin-left: 20px;" />
                    </div>
                    @if (FtpConversion.IsFileAConfigurationMessage)
                    {
                        <h6><i>This is changeable content of a file with configuration data. </i></h6>
                    }
                    else
                    {
                        <h6><i>This is changeable content of a file with recorded measurement data. </i></h6>
                    }
                    <textarea class="form-control" id="area1" rows="10" @bind="ExampleGsmCommunicationText"></textarea>
                </RadzenCard>
            </div>

            <div class="form-group">
                <RadzenCard>
                    <label for="LABEL 2">GsmCommunication to Json</label>
                    <pre><code>
    var converter = new KellerAg.Shared.IoT.Converters.Convert();
    string json = converter.GsmCommunicationToJson(gsmCommunicationText);</code></pre>
                    <h6><i>JSON content:</i></h6>
                    <textarea class="form-control" readonly id="area2" rows="10" @bind="@FtpConversion.GsmCommunicationToJson"></textarea>
                </RadzenCard>
            </div>


            <div class="form-group">
                <RadzenCard>
                    <label for="LABEL 3">GsmCommunicationJson To BusinessObject</label>
                    <pre><code>
    var businessObjectResult = converter.GsmCommunicationJsonToBusinessObject(GsmCommunicationJson);
    var businessObject = businessObjectResult.BusinessObjectRoot;
                    </code></pre>
                    <textarea class="form-control" readonly id="area3" rows="10" @bind="@FtpConversion.BusinessObjectJson"></textarea>
                </RadzenCard>
            </div>

            @if (FtpConversion.IsFileAConfigurationMessage)
            {
                <div class="form-group">
                    <RadzenCard>
                        <label for="LABEL 4">BusinessObject to DeviceConfiguration</label>
                        <pre><code>    DeviceSettings deviceConfiguration = Converter.BusinessObjectToDeviceConfiguration(businessObject);</code></pre>
                        <textarea class="form-control" readonly id="area4" rows="10" @bind="@FtpConversion.DeviceConfigurationJson"></textarea>
                    </RadzenCard>
                </div>
            }
            else
            {
                <div class="form-group">
                    <RadzenCard>
                        <label for="LABEL 5">BusinessObject to Chart</label>
                        See Measurement Data in<pre><code>  businessObjectResult.Measurements;</code></pre>

                        <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="false"
                                    AllowSorting="true" Data="@_measurements" TItem="BlazorMeasurement">
                            <Columns>
                                <RadzenGridColumn TItem="BlazorMeasurement" Property="Time" Title="Time">
                                    <Template Context="data">
                                        @string.Format("{0:u}", data.Time)
                                    </Template>
                                </RadzenGridColumn>

                                <RadzenGridColumn TItem="BlazorMeasurement" Property="Values" Title="Values">
                                    <Template Context="data">
                                        @($"{string.Join("  |  ", data.Values)}")
                                    </Template>
                                </RadzenGridColumn>
                            </Columns>
                        </RadzenGrid>
                    </RadzenCard>
                </div>
            }

        </RadzenTabsItem>
        <RadzenTabsItem Text="To FTP">
            <div class="form-group">
                <RadzenCard>
                    <label for="LABEL 6">Readable DeviceConfiguration-DTO to GsmCommunication-format.</label>
                    <pre><code>    string gsmCommunicationText = await ...</code></pre>
                    <div class="btn-group" style="margin: 10px">
                        <RadzenButton Click="@(args => ChooseDeviceConfigButtonClick(args, ExampleDeviceConfigText1))" Text="Load Example 1" Style="margin-left: 10px;" />
                        <RadzenButton Click="@(args => ChooseDeviceConfigButtonClick(args, ExampleDeviceConfigText2))" Text="Load Example 2" Style="margin-left: 10px;" />
                        <RadzenButton Click="@(args => ChooseDeviceConfigButtonClick(args, ExampleDeviceConfigText3))" Text="Load Example 3" Style="margin-left: 10px;" />
                    </div>

                    <RadzenTextArea @bind-Value="ExampleDeviceConfigText" Rows="6" Change="@(args => ConvertToGsmMessage(args))" Style="margin-bottom: 20px"></RadzenTextArea>
                    <RadzenTextArea @bind-Value="_convertedGsmMessageText" Rows="30" ReadOnly Style="margin-bottom: 20px"></RadzenTextArea>
                </RadzenCard>
            </div>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


@code {

    protected override void OnInitialized()
    {
        ExampleGsmCommunicationText = ExampleGsmCommunicationWithMeasurementsText;

        ConvertToGsmMessage(ExampleDeviceConfigText1);

        //     FtpConversion.OnChange += StateHasChanged;
    }

    public void Dispose() { } // => FtpConversion.OnChange -= StateHasChanged;

    private const string ExampleGsmCommunicationWithConfigurationText = "#F/d=0#T/s=443025550/p=14.01.14,15:38:49+04#M/a=+0.0004080+0.9559831+0.0000000+24.482742+0.9555750+25.100002/c=+1+1/d=+0.0004080+0.9559831+0.0000000+0.0000000+24.482742+0.0000000+0.9555750+25.100002#I/n=1416/s=17/b=99/f=12.40/v=+3.823#a/a=gprs.swisscom.ch/b=gprrs/c=gprs/d=000.000.000.000/e=Gdemo/f=gsm_xx@gsmdata.ch/g=yourpassword/h=gsm_xx@gsmdata.ch/i= yourpassword/j=pop.gsmdata.ch/k=110/l=smtp.gsmdata.ch/m=587/n=gsm_xx@gsmdata.ch#b/a=datamanager_xx@gsmdata.ch/b=demo@keller-druck.ch /c=demo@keller-druck.ch/g=/j=/k=/m=+41781234567/n=+41781234567/o=/q=+41794999000/r=KELLERDEMO/s=+41798101088/t=DemoStation/u=station keller/v=alarm message body/w=/0=8.747837/1=47.497869/2=450.000#c/a=443027701/b=443025541/c=631144800/d=442926000/e=631144800/g=3000/h=60/i=86400/j=86400/k=86400/m=215/n=0/o=3/p=0/q=1/r=4/s=1/t=1/v=4/w=4/x=0/y=3/z=0/0=0/1=0/2=0/3=0/4=4/5=7/6=3/7=0/8=1/9=0#f/a=431005483/g=3600/h=3600/m=1/n=1/o=1/q=1/z=15#d/a=+10.000000/b=+9.0000000/c=+0.0010000/f=+1.0000000/g=+1.0000000/i=+0.9000000/j=+1.2000000/k=+5.0000000/m=+1.0000000/n=+9.1180000/o=+400.00000/p=+0.0000000/q=+1000.0000/r=+1.0000000/s=+0.0000000/t=+1.0000000/u=+0.0000000/v=+10.000000/w=+11.000000/0=+8.7478370/1=+47.497869/2=+450.00000#k/a=ftp.gsmdata.ch/b=datamanager_xx@gsmdata.ch/c=yourpassword/d=datamanager_xx/e=21/f=21/g=2000/h=#O/g=43607#E/e";
    private const string ExampleGsmCommunicationWithMeasurementsText = "#F/e=0#C/a=427/b=30#T/s=650410250/p=20.08.11,01:31:01+08#M/a=-0.0006130+0.9656312+26.115936+26.057617+0.9662400+25.559999+0.0000000+0.0000000/c=+1+1#I/n=926/s=15/b=99/e=9.20/f=19.50/h=31/v=+3.890#B/a=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ALoc7BA/dzowQdFDQEHQv2A/d2JwQczMoAAAALAAAADwAAOEALogtBA/dzMwQdDtQEHQdmA/d1sBqybEeOsAAHBBzHqgAAAAsAAAAP//////////////////////////////////////////////////////////#E/e#X/a=40205";

    private string _exampleGsmCommunicationText = "";

    private int[] _measurementDefinitionIds;
    private IEnumerable<BlazorMeasurement> _measurements;

    public string ExampleGsmCommunicationText
    {
        get => _exampleGsmCommunicationText;
        set
        {
            _exampleGsmCommunicationText = value;
            FtpConversion.UpdateFtpTextToDtoConversion(value);
            _measurements = FtpConversion.Measurements;
            _measurementDefinitionIds = FtpConversion.MeasurementDefinitionIds;

            //Console.WriteLine("____"+JsonConvert.SerializeObject(_measurements));
        }
    }

    private void ChooseTextFileContentButtonClick(MouseEventArgs args, bool isConfigFile)
    {
        ExampleGsmCommunicationText = isConfigFile ? ExampleGsmCommunicationWithConfigurationText : ExampleGsmCommunicationWithMeasurementsText;
    }

    private void ChooseDeviceConfigButtonClick(MouseEventArgs args, string exampleDeviceConfigText)
    {
        ExampleDeviceConfigText = exampleDeviceConfigText;
        ConvertToGsmMessage(exampleDeviceConfigText);
    }

    public const string ExampleDeviceConfigText3 = @"{""HardwareMeasureSaveChannel0"":true,""HardwareMeasureSaveChannel1"":true,""HardwareMeasureSaveChannel2"":true,""HardwareMeasureSaveChannel3"":false,""HardwareMeasureSaveChannel4"":false,""HardwareMeasureSaveChannel5"":true,""HardwareMeasureSaveChannel6"":true,""HardwareMeasureSaveChannel7"":false,""HardwareMeasureSaveChannel8"":true,""HardwareMeasureSaveChannel9"":false,""HardwareMeasureSaveChannel10"":true,""HardwareMeasureSaveChannel11"":false,""HardwareMeasureSaveChannel12"":true,""HardwareMeasureSaveChannel13"":false,""HardwareMeasureSaveChannel14"":true,""HardwareMeasureSaveChannel15"":false}";
    public const string ExampleDeviceConfigText2 = @"{""Id"":0,""CreationDateTime"":""0001-01-01T00:00:00"",""State"":0,""IsSentFromAPI"":false,""UniqueSerialNumber"":null,""LockTimerMeasurement"":true,""LockTimerAlarm"":false,""LockTimerInfo"":true,""LockTimerCheck"":false,""LockTimerDial"":true,""GeneralNetworkName"":""Test Network Name"",""GeneralOwnTelNumber"":""+41793893499"",""GeneralLocationName"":""Hinter dem Haus"",""GeneralLocationAddressText"":""Berninastrasse 9"",""GeneralGsmSerialNumber"":""5483"",""GeneralGsmSoftwareVersion"":""1.0.1"",""GeneralLongitudeText"":""7.58831"",""GeneralLatitudeText"":""5.38752"",""GeneralAltitudeText"":""500"",""GeneralGpsLongitude"":7.58831,""GeneralGpsLatitude"":5.38752,""GeneralGpsAltitude"":500.0,""GeneralCellLocateLongitudeText"":null,""GeneralCellLocateLatitudeText"":null,""GeneralCellLocateAltitudeText"":null,""HardwareConnectionType"":2,""HardwarePowerExternalDevice"":4,""HardwareMeasureSaveChannel0"":true,""HardwareMeasureSaveChannel1"":true,""HardwareMeasureSaveChannel2"":true,""HardwareMeasureSaveChannel3"":false,""HardwareMeasureSaveChannel4"":false,""HardwareMeasureSaveChannel5"":true,""HardwareMeasureSaveChannel6"":true,""HardwareMeasureSaveChannel7"":false,""HardwareMeasureSaveChannel8"":true,""HardwareMeasureSaveChannel9"":false,""HardwareMeasureSaveChannel10"":true,""HardwareMeasureSaveChannel11"":false,""HardwareMeasureSaveChannel12"":true,""HardwareMeasureSaveChannel13"":false,""HardwareMeasureSaveChannel14"":true,""HardwareMeasureSaveChannel15"":false,""HardwareDataConnectionTimer"":null,""HardwareDataConnectionInterval"":68531,""HardwareSupportedSensorTypes"":5,""HardwarePreOnTime"":250,""HardwareMultiplierPressureChannels"":5.21,""HardwareMultiplierTemperatureChannels"":7.14,""HardwareResolutionPressureChannels"":6,""HardwareResolutionTemperatureChannels"":4,""HardwareDataConnectionCallNumber"":""+5821347865"",""MeasurementTimer"":null,""MeasurementInterval"":68501,""MeasurementSendSms"":true,""MeasurementSendMail"":false,""MeasurementSendFTP"":true,""MeasurementMailAddress"":""measuerement@keller-druck.com"",""MeasurementSmsNumber"":""+41793854745"",""MeasurementSmsText"":""MEASURE"",""MeasurementSendMailAfterX"":20,""MeasurementSendSmsAfterX"":21,""MeasurementSendFtpAfterX"":22,""GprsAPN"":""New APN"",""GprsID"":""546813"",""GprsPassword"":""Password"",""GprsDNS"":""dns.swisscom.ch"",""GprsSimPin"":""6526"",""GprsSmsServiceCenterNr"":""+41783456000"",""GprsPasswordForQuerySms"":""QueryPW"",""GprsModemProtocol"":1,""CellularModuleId"":null,""CellularModuleRevisionId"":null,""CellularModuleSerialNumberIMEI"":null,""CellularSIMCardId"":null,""CellularSIMCardSubscriberId"":null,""FtpServerName"":""ftp.keller-druck.com"",""FtpServerPath"":""folder"",""FtpUsername"":""Username"",""FtpAccount"":""AccountName"",""FtpPassword"":""PasswordForFTP"",""FtpPort"":21,""FtpUseTLS"":false,""FtpSourceControlPort"":65,""FtpSourceDataPort"":66,""FtpUseActiveMode"":true,""MailSmtpShowedName"":""SMTP Name"",""MailPop3Username"":""POP Username"",""MailPop3Password"":""POP Password"",""MailSmtpUseSSL"":true,""MailPop3UseSSL"":false,""MailUseAlternativeSMTPLogin"":true,""MailReturnAddress"":""doris.leuthard@gmail.com"",""MailOptSmtpUsername"":""SMTP Username"",""MailOptSmtpPassword"":""SMTP Password"",""MailSmtpServer"":""smtp.keller-druck.ch"",""MailSmtpPort"":55,""MailPop3Server"":""pop.keller-druck.ch"",""MailPop3Port"":56,""InfoTimer"":null,""InfoInterval"":68503,""InfoSendSms"":false,""InfoSendMail"":true,""InfoSendFTP"":false,""InfoMailAddress"":""info@keller-druck.com"",""InfoSmsNumber"":""+49582164834"",""CheckTimer"":null,""CheckInterval"":68506,""CheckSendSms"":true,""CheckSendMail"":false,""CheckSendFTP"":true,""CheckAnswerSmsText"":""ANSWER"",""AlarmTimer"":null,""AlarmInterval"":68511,""AlarmSendSms"":false,""AlarmSendMail"":true,""AlarmSendFTP"":false,""AlarmMailAddress"":""alarm@keller-druck.com"",""AlarmSmsNumber"":""+652423842347"",""AlarmSmsText"":""ALARM"",""AlarmSendXTimes"":50,""AlarmType"":2,""AlarmChannelNumber"":8,""AlarmOnThreshold"":5.685,""AlarmOffThreshold"":7.354,""AlarmDeltaThreshold"":2.471,""EventType"":3,""EventMeasureTimer"":null,""EventCheckInterval"":68521,""EventMeasureInterval"":68522,""EventChannel"":11,""EventOnValueThreshold"":1.25,""EventOffValueThreshold"":94.21,""EventDeltaValueThreshold"":122.0,""EventSendMailXTimes"":15,""WaterLevelCalculationEnable"":1.0,""WaterLevelCalculationLength"":-50.001,""WaterLevelCalculationHeight"":10.47,""WaterLevelCalculationOffset"":2.3,""WaterLevelCalculationDensity"":1.05,""WaterLevelCalculationWidth"":5.1,""WaterLevelCalculationAngle"":45.2,""WaterLevelCalculationFormFactor"":6.51,""WaterLevelCalculationMinCalcHeight"":78.4,""WaterLevelCalculationFormType"":7,""WaterLevelCalculationIsAbsoluteSensor"":false,""WaterLevelCalculationCalculateFrom"":0,""WaterLevelCalculationConversionTo"":3}";
    public const string ExampleDeviceConfigText1 = "{\"GeneralNetworkName\":\"Network Name\",\"GeneralLocationName\":\"My Device Name\",\"GeneralAltitudeText\":\"500\",\"GeneralGpsLongitude\":47.58831,\"GeneralGpsLatitude\":5.38752,\"GeneralGpsAltitude\":500.0,\"HardwareConnectionType\":5,\"MeasurementInterval\":48000,\"MeasurementSendFTP\":true,\"MeasurementSendFtpAfterX\":12,}";
    public string ExampleDeviceConfigText { get; set; }
    private string _convertedGsmMessageText;

    private void ConvertToGsmMessage(string deviceConfigJson)
    {
        ExampleDeviceConfigText = deviceConfigJson;
        // Alternative:
        // DeviceSettings config = JsonConvert.DeserializeObject<DeviceSettings>(deviceConfigJson);
        // Converter.DeviceConfigurationToGsmCommunication(config);
        var gsmCommunication = Converter.DeviceConfigurationToGsmCommunication(deviceConfigJson);

        _convertedGsmMessageText = Newtonsoft.Json.JsonConvert.SerializeObject(gsmCommunication, Formatting.Indented);
        StateHasChanged();
    }


}
